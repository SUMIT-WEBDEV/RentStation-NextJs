// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Products              Products[]
  conversations         Conversation[]         @relation("ConversationMembers")
  messages              Message[]              @relation("SenderMessages")
  favorites             Favorite[]
  createdAt             DateTime               @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Products {
  id          String     @id @default(cuid())
  location    String
  price       String
  description String
  title       String
  duration    String
  category    String
  image       String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime   @default(now())
  Favorite    Favorite[]
}

model Conversation {
  id        String    @id @default(cuid())
  members   User[]    @relation("ConversationMembers")
  messages  Message[] @relation("ConversationMessages")
  createdAt DateTime  @default(now())
}

model Message {
  id             String       @id @default(cuid())
  text           String
  sender         User         @relation("SenderMessages", fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  conversationId String
  createdAt      DateTime     @default(now())
}

model Favorite {
  id        String   @id @default(cuid())
  product   Products @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([productId, userId])
}
